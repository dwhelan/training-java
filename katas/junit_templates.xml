<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="JUnit 4 Triple A" enabled="true" name="aaa">@${testType:newType(org.junit.Test)} public void
${describe_behaviour}() {
	// Arrange

	// Act
	
	// Assert
	${cursor}
}${staticImport:importStatic('org.junit.Assert.*')}</template><template autoinsert="true" context="java" deleted="false" description="JUnit 4 assertThat() assertion" enabled="true" name="at">assertThat(${actual}, ${matcher});${staticImport:importStatic('org.junit.Assert.*')}</template><template autoinsert="true" context="java" deleted="false" description="JUnit 4 Expected exception" enabled="true" name="ee">try {
	${act} 
	fail();
} catch (Exception expected) {
	${assert} 
}
</template><template autoinsert="true" context="java" deleted="false" description="JUnit 4 equalTo() matcher" enabled="true" name="eq">equalTo(${cursor})${staticImport:importStatic('org.hamcrest.CoreMatchers.*')}</template><template autoinsert="true" context="java" deleted="false" description="JUnit 4 Parameters method" enabled="true" name="parameters">@RunWith(Parameterized.class)
public class ${primary_type_name} {
	private ${inputType} input;
	private ${expectedType} expected; 

    @${type:newType(org.junit.runners.Parameterized.Parameters)}
    public static Collection&lt;Object[]&gt; testData() {
	    return asList(new Object[][] {
			// insert input, expected pairs
			//     e.g.: { "1", 1 } // if we were testing ability to parse integer strings.
			{},	
	    });
    }

	public ${primary_type_name}(${inputType} input, ${expectedType} expected) {
		super();
		this.input = input;
		this.expected = expected;
	}

	@Test
	public void transformed_input_should_equal_expected() {
		assertThat(message(), process(), is(expected));
	}
	
	private String message() {
		return format("Processing of {0}", input);
	}
	
	private ${expectedType} process() {
		return null;
	}
}
${:import(java.util.Collection, org.junit.runners.Parameterized, org.junit.runner.RunWith, org.junit.Test)}
${staticImport:importStatic('java.util.Arrays.asList', 'org.junit.Assert.*', 'java.text.MessageFormat.format', 'org.hamcrest.CoreMatchers.is')}

</template><template autoinsert="false" context="java-members" deleted="false" description="JUnit 4 Test method" enabled="true" name="test">@${testType:newType(org.junit.Test)} public void
${describe_behaviour}() {
    ${cursor} 
}${staticImport:importStatic('org.junit.Assert.*')}</template></templates>